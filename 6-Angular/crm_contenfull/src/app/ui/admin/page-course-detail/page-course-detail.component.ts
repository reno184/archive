import {Component, OnInit} from '@angular/core';
import {ActivatedRoute, Params} from "@angular/router";
import {filter, map, mergeMap, tap} from "rxjs/operators";
import {Observable} from "rxjs";
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {Store} from "@ngrx/store";
import {AppDatas} from "../../../common/constante";
import {selectList} from "../../../store/category.reducer";
import {Category} from "../../../model/features/Category";
import {AngularFireStorage} from "@angular/fire/storage";
import {add_request, update_request} from "../../../store/course.action";
import * as course_reducer from "../../../store/course.reducer";
import {CarouselService} from "../../../service/carousel.service";

@Component({
    selector: 'app-page-course-detail',
    template: `
        <div class="container" *ngIf="params$ | async as params">
            <h1 class="lead mt-4">Course {{title}}</h1>
            <hr>
            <form [formGroup]="formGroup" (ngSubmit)="onSubmit(params)">
                <div class="row">
                    <div class="col-12 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'title-US'"
                                                [maxLength]="100"
                                                [title]="'Title (required) – English (United States)'"></app-input-text>
                                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'title-DE'"
                                                [maxLength]="100" [title]="'Title (required) – German (Germany)'"
                                                [additionnalText]="'The name of the course; also the title for content editors to find entries in Contentful.'"></app-input-text>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'short-description-US'"
                                                [maxLength]="256"
                                                [title]="'Short description (required) – English (United States)'"></app-input-text>
                                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'short-description-DE'"
                                                [maxLength]="256"
                                                [title]="'Short description (required) – German (Germany)'"
                                                [additionnalText]="'A condensed description, useful for displaying in list views.'"></app-input-text>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-group mt-3">
                    <div class="card">
                        <div class="card-body">

                            ddsdf     {{imagePathId$ | async}}
                            <input type="text" formControlName="imagePathId">
                            <div class="d-flex justify-content-center">
                                <img [src]="imgPlaceHolder" class="rounded"
                                     style="width: 100%; height:100%; object-fit:cover"
                                     alt="image">
                            </div>
                            <footer class="py-2 text-center">
                                <a [routerLink]="['/', { outlets: { modal: 'modal/select-image'}}]"
                                   title="select images" class="btn btn-primary">{{lblButton}}</a>
                            </footer>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'slug'"
                                            [title]="'Short description (required) – German (Germany)'"
                                            [additionnalText]="'An autogenerated url-safe and human-readable identifier for this course.'"></app-input-text>
                            <div class="mb-3">
                                <label for="i-levels">Level skills</label>
                                <select formControlName="levels" class="form-select">
                                    <option>Choose</option>
                                    <option *ngFor="let level of appDatas.levels"
                                            [selected]="level === this.formGroup.get('levels').value"
                                            [value]="level">{{ level | titlecase }}</option>
                                </select>
                                <small class="fw-lighter">The target audiences' level in the learning journey that this
                                    course is designed for.</small>
                            </div>
                            <div class="mb-3">
                                <label for="i-duration">Duration</label>
                                <input id="i-duration" type="number" step="10" min="0" formControlName="duration"
                                       class="form-control">
                                <small class="fw-lighter">The duration, in minutes, it takes to finish this
                                    course.</small>
                            </div>
                            <div class="mb-3">
                                <label for="i-duration">Categories</label>
                                <select formControlName="categories" class="form-select"
                                        *ngIf="category$ | async as categories">
                                    <option>Choisir</option>
                                    <option *ngFor="let category of categories"
                                            [selected]="category.id === this.formGroup.get('categories').value"
                                            [value]="category.id">{{ category.id }}</option>
                                </select>
                                <small class="fw-lighter">The category of the course.</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card mt-3">
                    <div class="card-body">
                        <div class="mb-3">
                            <label>Description (required) – English (United States)</label>
                            <quill-editor [modules]="editorConfig" (onContentChanged)="textEditorChanged($event,5000)"
                                          formControlName="description-US"></quill-editor>
                            <div class="d-flex"><small
                                    class="flex-grow-1">{{onTextCounter(formGroup.get('description-US').value)}}</small><small>Maximum
                                5000 characters</small></div>
                        </div>
                        <div class="mb-3">
                            <label>Description (required) – German (Germany)</label>
                            <quill-editor [modules]="editorConfig" (onContentChanged)="textEditorChanged($event,5000)"
                                          formControlName="description-DE"></quill-editor>
                            <div class="d-flex"><small
                                    class="flex-grow-1">{{onTextCounter(formGroup.get('description-DE').value)}}</small><small>Maximum
                                5000 characters</small></div>
                            <small class="fw-lighter">The copy giving an overview of the course.</small>
                        </div>
                    </div>
                </div>
                <div class="card my-5">
                    <div class="card-body d-flex justify-content-around">
                        <a routerLink="../../home" title="retour" class="btn btn-primary">Retour</a>
                        <button type="submit" class="btn btn-primary" [disabled]="formGroup.invalid">Valider</button>
                    </div>
                </div>
            </form>
        </div>
    `,
    styles: []
})
export class PageCourseDetailComponent implements OnInit {
    lblButton: string;
    imgPlaceHolder = '../../../../assets/img/no_image.jpeg';
    title: string;
    formGroup: FormGroup;
    category$: Observable<Category[]>;
    params$: Observable<Params>;
    imagePathId$: Observable<string>;

    editorConfig = {
        toolbar: [
            ['bold', 'italic', 'underline'],
            ['blockquote'],
            [{'header': 1}, {'header': 2}],
            ['link'],
            [{'list': 'ordered'}, {'list': 'bullet'}],
        ]
    };

    constructor(private activatedRoute: ActivatedRoute, private angularFireStorage: AngularFireStorage, private formBuilder: FormBuilder, private store: Store<any>, public appDatas: AppDatas, private carouselService: CarouselService) {
        this.category$ = this.store.select(selectList);

        this.formGroup = new FormGroup({
            'title-US': this.formBuilder.control('test title us <p>test</p>', Validators.required),
            'title-DE': this.formBuilder.control('test title DE', Validators.required),
            'short-description-US': this.formBuilder.control('test short desc us', Validators.required),
            'short-description-DE': this.formBuilder.control('test short desc de', Validators.required),
            'description-US': this.formBuilder.control('test desc us <script>alert(\'hello world\')</script>', Validators.required),
            'description-DE': this.formBuilder.control('test desc us', Validators.required),
            'slug': this.formBuilder.control('slug', Validators.required),
            'duration': this.formBuilder.control(0),
            'categories': this.formBuilder.control('Category 1'),
            'levels': this.formBuilder.control('beginner'),
            'imagePathId': this.formBuilder.control(null, Validators.required)
        });
        this.imagePathId$ = this.formGroup.get('imagePathId').valueChanges.pipe(filter(x => !!x), mergeMap(id => {
            return this.carouselService.getImageUrl(id);
        }));

        this.activatedRoute.queryParams.pipe(map(params => params['image-path-id'])).subscribe(imagePathId => {
            // console.log(imagePathId);
            this.formGroup.get('imagePathId').patchValue(imagePathId);
        });

        this.params$ = this.activatedRoute.params.pipe(map(params => params['id']), tap(courseId => {
            if (courseId === 'new') {
                this.title = 'Création';
                this.lblButton = 'Ajouter'
            } else {
                this.title = 'Mise à jour';
                this.lblButton = 'Modifier'
                this.store.select(course_reducer.selectCourseById, {id: courseId}).pipe(filter(item => !!item)).subscribe(item => {
                    for (let [key, value] of Object.entries(item)) {
                        const field = this.formGroup.get(key);
                        if (!!field) {
                            field.patchValue(value);
                        }
                    }
                });
            }
        }));
    }

    ngOnInit(): void {
    }

    onSubmit(id) {
        const obj = this.formGroup.value
        if (id !== 'new') {
            this.store.dispatch(update_request({id, obj}))
        } else {
            this.store.dispatch(add_request({obj}))
        }
    }

    onTextCounter(value: string | null) {
        if (value) {
            let length = value.length;
            return length + ' character' + (value.length > 1 ? 's' : '');
        } else {
            return '0 character';
        }
    }

    textEditorChanged($event, MAX_LENGTH: number) {
        if ($event.editor.getLength() > MAX_LENGTH) {
            $event.editor.deleteText(MAX_LENGTH, $event.editor.getLength());
        }
    }
}

// donc j'ai un composant
// je passe l'url
