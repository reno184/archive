import {Component, OnInit} from '@angular/core';
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import {filter, map, tap} from "rxjs/operators";
import * as lesson_reducer from "../../../store/lesson.reducer";
import {ActivatedRoute, Params} from "@angular/router";
import {Observable} from "rxjs";
import * as lesson_action from "../../../store/lesson.action";
import {Store} from "@ngrx/store";
import {Course} from "../../../model/features/Course";
import {selectItems} from "../../../store/course.reducer";

@Component({
  selector: 'app-page-lesson-detail',
  template: `
    <div class="container" *ngIf="params$ | async as params">
      <h1 class="lead mt-4 d-flex"><span class="flex-grow-1">Lesson</span><strong
          class="text-primary">{{onTitle(isUpdate)}}</strong></h1>
      <hr>
      <form [formGroup]="formGroup" (ngSubmit)="onSubmit(params)">
        <div class="row">
          <div class="col-12 col-md-6">
            <div class="card">
              <div class="card-body">
                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'title-US'" [maxLength]="100"
                                [title]="'Title (required) – English (United States)'"></app-input-text>
                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'title-DE'" [maxLength]="100"
                                [title]="'Title (required) – German (Germany)'"
                                [additionnalText]="'The name of the lesson; also the title for content editors to find entries in Contentful.'"></app-input-text>
              </div>
            </div>
          </div>
          <div class="col-12 col-md-6">
            <div class="card">
              <div class="card-body">
                <app-input-select *ngIf="courses$| async as courses" [isUpdate]="isUpdate" [parentGroupForm]="formGroup"
                                  [fieldName]="'title-US'" [items]="courses" [controlKeyName]="'parent-course'"
                                  [title]="'Parent course (required)'"
                                  [additionnalText]="'The course that includes this lesson'"></app-input-select>
                <app-input-text [parentGroupForm]="formGroup" [controlKeyName]="'slug'" [title]="'Slug (required)'"
                                [additionnalText]="'An autogenerated url-safe and human-readable identifier for this lesson'"></app-input-text>
              </div>
            </div>
          </div>
        </div>
        <div class="card my-5">
          <div class="card-body d-flex justify-content-around">
            <a routerLink="../../home" title="retour" class="btn btn-primary">Retour</a>
            <button type="submit" class="btn btn-primary" [disabled]="formGroup.invalid">Valider</button>
          </div>
        </div>
      </form>
    </div>
  `,
  styles: []
})
export class PageLessonDetailComponent implements OnInit {
  formGroup: FormGroup;
  title: string;
  isUpdate: boolean
  params$: Observable<Params>;
  courses$: Observable<Course[]>

  constructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private store: Store<any>) {
    this.courses$ = this.store.select(selectItems)
    this.formGroup = new FormGroup({
      'title-US': this.formBuilder.control('test title us <p>test</p>', Validators.required),
      'title-DE': this.formBuilder.control('test title DE', Validators.required),
      'slug': this.formBuilder.control('slug', [Validators.required]),
      'parent-course': this.formBuilder.control('choisir', [Validators.pattern("((?!choisir).)*")])
    });

    this.params$ = this.activatedRoute.params.pipe(map(params => params['id']), tap(id => {
      this.isUpdate = id !== 'new'
      if (this.isUpdate) {
        this.store.select(lesson_reducer.itemById, {id}).pipe(filter(item => !!item)).subscribe(item => {
          for (let [key, value] of Object.entries(item)) {
            const field = this.formGroup.get(key);
            if (!!field) {
              field.patchValue(value);
            }
          }
        });
      }
    }));
  }

  ngOnInit(): void {
  }

  onSubmit(id) {
    const obj = this.formGroup.value
    if (id !== 'new') {
      this.store.dispatch(lesson_action.update_request({id, obj}))
    } else {
      this.store.dispatch(lesson_action.add_request({obj}))
    }
  }

  onTitle(isUpdate: boolean) {
    return isUpdate ? 'Mise à jour' : 'Création';
  }
}
